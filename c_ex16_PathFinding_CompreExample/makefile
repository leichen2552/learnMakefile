# $(wildcard $(DIR)/_pattern) 获取$(DIR)文件夹满足_pattern的文件
# $(notdir _names) 去除_names中每一个文件夹名的路径前缀
# $(patsubst _pattern, replacement, _text)将_text中符合_pattern的部分替换为replacement


#小结
#工程项目中不希望源码文件夹在编译时被改动
#模式规则的灵活使用使得makefile具有复用性
#变量的灵活运用使得makefile具有扩展性
#规模较小的项目没必要使用自动生成依赖关系的解决方案
#规模较小的项目可以直接让源文件依赖于头文件（易于维护）

.PHONY: all clean

DIR_BUILD := build
DIR_SRC := src
DIR_INC := inc

TYPE_INC := .h
TYPE_SRC := .c
TYPE_OBJ := .o

CC := gcc
LFLAGS :=
CFLAGS := -I $(DIR_INC)
ifeq ($(DEBUG),true)
#追加赋值，原变量值与新值之间会多一个空格	
CFLAGS += -g
endif

#ifeq ($(MAKECMDGOALS), "all")


MKDIR := mkdir
RM := rm -fr

APP := $(DIR_BUILD)/app.out
HDRS := $(wildcard $(DIR_INC)/*$(TYPE_INC))
HDRS := $(notdir $(HDRS))
OBJS := $(wildcard $(DIR_SRC)/*$(TYPE_SRC))
OBJS := $(OBJS:$(TYPE_SRC)=$(TYPE_OBJ))
OBJS := $(patsubst $(DIR_SRC)/%, $(DIR_BUILD)/%, $(OBJS))


vpath %$(TYPE_INC) $(DIR_INC)
vpath %$(TYPE_SRC) $(DIR_SRC)

all : $(DIR_BUILD) $(APP)
	@echo "Target File ==> $(APP)"

$(DIR_BUILD):
	$(MKDIR) $@

$(APP) : $(OBJS)
	$(CC) $(LFLAGS)-o $@ $^

$(DIR_BUILD)/%$(TYPE_OBJ) : %$(TYPE_SRC) $(HDRS)
	$(CC) $(CFLAGS) -o $@ -c $<

clean:
	$(RM) $(DIR_BUILD)

