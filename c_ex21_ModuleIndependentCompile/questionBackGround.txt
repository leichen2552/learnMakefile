第三方库的调用：
经验假设：
第三方库通过函数调用的方式提供库中的功能
库文件发布时都附带了声明库函数圆形的头文件
编译阶段使用头文件，链接阶段使用库文件

1、在pro-cfg中创建一个libs的路径
2、在pro-rule中利用命令行来传递这个路径
3、在cmd-cfg中利用vpath指定头文件的查找路径
4、在编译的的时候利用-I指定头文件的编译路径

链接注意：
-定义DIR_LIBS_LIB:=libs/lib（第三方库所在的路径）
-链接时不会直接链接DIR_LIBS_LIB中的库文件
-需要现将库文件拷贝到DIR_BUILD文件夹
-必须考虑考背后的库文件和原始库文件的新旧关系

第三方库的链接阶段支持
-定义变量EXTERNA_LIB用于保存第三方库列表
-目标link需要依赖与第三方库列表
-第三方库文件必须作为最后一个依赖出现$(EXTERNAL_LIB)
	这里是为了处理一种极端的情况，假设有一个第三方库的文件名和我们一个子模块名编译出来的名字是一模一样的，这个时候我就要优先使用子模块的文件名
link $(APP) : $(MODULE_LIB) $(EXTERNAL_LIB)
	@echo "Begin to link ... "
	$(CC) $(LFLAGS) -o $(APP) -Xlinker "-(" $^ -Xlinker "-)"
	@echo "Link Success !"			   

回归测试：
测试新功能之后，需要已有的旧功能进行测试，这个叫做回归测试

小结：
1、编译环境必须支持第三方库的使用（静态库或者动态库）
2、工程开发一般会使用特殊文件夹存放第三方库
3、第三方库所附带的头文件用于声明库函数（编译阶段需要）
4、在链接阶段先将库函数拷贝到build文件夹，再进行链接

5、如果突然不需要使用第三方库，makefile需要依然能使用！
